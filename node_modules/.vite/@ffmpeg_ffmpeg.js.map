{
  "version": 3,
  "sources": ["dep:@ffmpeg_ffmpeg", "../@ffmpeg/ffmpeg/dist/esm/index.js", "../@ffmpeg/ffmpeg/dist/esm/classes.js", "../@ffmpeg/ffmpeg/dist/esm/const.js", "../@ffmpeg/ffmpeg/dist/esm/utils.js", "../@ffmpeg/ffmpeg/dist/esm/errors.js"],
  "sourcesContent": ["\nexport * from \"./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js\"", "export * from \"./classes.js\";\n", "import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n", "export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.6\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n", "/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n", "export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n"],
  "mappings": "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",
  "names": []
}
